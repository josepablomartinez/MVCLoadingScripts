//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mapgenix.GSuite.Mvc.Properties{
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionDescription {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionDescription() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Mapgenix.GSuite.Mvc.Properties.ExceptionDescription", typeof(ExceptionDescription).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActualWidth and ActualHeight property can be used after PostBack..
        /// </summary>
        internal static string ActualWidthAndHeightInvalid {
            get {
                return ResourceManager.GetString("ActualWidthAndHeightInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class breaks you have provided are invalid..
        /// </summary>
        internal static string ClassBreaksIsNotValid {
            get {
                return ResourceManager.GetString("ClassBreaksIsNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class breaks you have provided are invalid..
        /// </summary>
        internal static string ClassBreaksIsValid {
            get {
                return ResourceManager.GetString("ClassBreaksIsValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you use the CustomOverlays collection you may not at the same time use the following properties:  BackgroundOverlay, StaticOverlay, DynamicOverlay or MarkerOverlay.  CustomOverlays was designed to replace these so that you can implement as many overlays as you need in any order.  Trying to use CustomerOverlays and one of the properties above is not allowed as there is not a definitive logical order we could draw them in.  Please reference to the documentation of CustomOverlays property for more informati [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DefaultAndCustomOverlayDuplicate {
            get {
                return ResourceManager.GetString("DefaultAndCustomOverlayDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for the enumeration is not on of the valid values..
        /// </summary>
        internal static string EnumerationOutOfRange {
            get {
                return ResourceManager.GetString("EnumerationOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Epsg projection can only set to the overlays whose IsBaseOverlay property is true..
        /// </summary>
        internal static string EpsgProjectionSupportBaseOverlayOnly {
            get {
                return ResourceManager.GetString("EpsgProjectionSupportBaseOverlayOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The evaluation edition has not been installed..
        /// </summary>
        internal static string EvalNotInstall {
            get {
                return ResourceManager.GetString("EvalNotInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The evaluation has expired.  Please 
        ///contact Mapgenix for purchasing 
        ///option or an extension to the trial..
        /// </summary>
        internal static string EvaluationExpired {
            get {
                return ResourceManager.GetString("EvaluationExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested column name is not in the Feature..
        /// </summary>
        internal static string FieldNameIsNotInFeature {
            get {
                return ResourceManager.GetString("FieldNameIsNotInFeature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value should be between zero and one hundred..
        /// </summary>
        internal static string JpegImageCompressionShouldBeBetweenZeroAndOneHundred {
            get {
                return ResourceManager.GetString("JpegImageCompressionShouldBeBetweenZeroAndOneHundred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The map unit is invalid, please set the MapUnit with a proper value..
        /// </summary>
        internal static string MapUnitIsInvalid {
            get {
                return ResourceManager.GetString("MapUnitIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MarkerOverlay is never a base layer..
        /// </summary>
        internal static string MarkerLayerNotSupportBaseLayer {
            get {
                return ResourceManager.GetString("MarkerLayerNotSupportBaseLayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pan direction is invalid, please set the PanDirection with a proper value..
        /// </summary>
        internal static string PanDirectionIsInvalid {
            get {
                return ResourceManager.GetString("PanDirectionIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter you supplied may not be null..
        /// </summary>
        internal static string ParameterIsNull {
            get {
                return ResourceManager.GetString("ParameterIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter you supplied may not be null or empty..
        /// </summary>
        internal static string ParameterIsNullOrEmpty {
            get {
                return ResourceManager.GetString("ParameterIsNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Size&apos;s width and height should be greater than zero..
        /// </summary>
        internal static string SizeIsNotValid {
            get {
                return ResourceManager.GetString("SizeIsNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value should be greater or equal to zero..
        /// </summary>
        internal static string TheValueShouldBeGreaterOrEqualToZero {
            get {
                return ResourceManager.GetString("TheValueShouldBeGreaterOrEqualToZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value should be greater than zero..
        /// </summary>
        internal static string TheValueShouldBeGreaterThanZero {
            get {
                return ResourceManager.GetString("TheValueShouldBeGreaterThanZero", resourceCulture);
            }
        }
    }
}
